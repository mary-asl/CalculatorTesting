<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="5" ignored="3" total="52" passed="44">
  <reporter-output>
  </reporter-output>
  <suite name="Calculator" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
    <groups>
    </groups>
  </suite> <!-- Calculator -->
  <suite name="Calculator (0)" duration-ms="332" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
    <groups>
      <group name="main">
        <method signature="SubLongTest.subLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubLongTest@246ae04d]" name="subLongTest" class="com.epam.tat.module4.ArithmeticFunctionality.SubLongTest"/>
        <method signature="SumDoubleTest.sumLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest@783e6358]" name="sumLongTest" class="com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest"/>
        <method signature="SumLongTest.sumLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumLongTest@13fee20c]" name="sumLongTest" class="com.epam.tat.module4.ArithmeticFunctionality.SumLongTest"/>
      </group> <!-- main -->
    </groups>
    <test name="Arithmetic" duration-ms="160" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
      <class name="com.epam.tat.module4.ArithmeticFunctionality.SubLongTest">
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubLongTest@246ae04d]" name="subLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="subDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubLongTest@246ae04d]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubLongTest@246ae04d]" name="subLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="subDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubLongTest@246ae04d]" name="subLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="subDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.SubLongTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.MultLongTest">
        <test-method status="PASS" signature="testMult(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultLongTest@180bc464]" name="testMult" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="multDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMult -->
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultLongTest@180bc464]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="testMult(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultLongTest@180bc464]" name="testMult" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="multDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMult -->
        <test-method status="PASS" signature="testMult(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultLongTest@180bc464]" name="testMult" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="multDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMult -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.MultLongTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest@783e6358]" name="initCalculator" is-config="true" duration-ms="21" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="sumLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest@783e6358]" name="sumLongTest" duration-ms="5" started-at="2020-07-13T22:10:29 ALMT" data-provider="sumDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumLongTest -->
        <test-method status="PASS" signature="sumLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest@783e6358]" name="sumLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="sumDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumLongTest -->
        <test-method status="PASS" signature="sumLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest@783e6358]" name="sumLongTest" duration-ms="1" started-at="2020-07-13T22:10:29 ALMT" data-provider="sumDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumLongTest -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.SumDoubleTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.SubDoubleTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubDoubleTest@62043840]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="subLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubDoubleTest@62043840]" name="subLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="subDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubDoubleTest@62043840]" name="subLongTest" duration-ms="1" started-at="2020-07-13T22:10:29 ALMT" data-provider="subDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubDoubleTest@62043840]" name="subLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="subDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SubDoubleTest@62043840]" name="subLongTest" duration-ms="2" started-at="2020-07-13T22:10:29 ALMT" data-provider="subDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.SubDoubleTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.DivLongTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivLongTest@4e04a765]" name="initCalculator" is-config="true" duration-ms="21" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="testDiv(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivLongTest@4e04a765]" name="testDiv" duration-ms="5" started-at="2020-07-13T22:10:29 ALMT" data-provider="divDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDiv -->
        <test-method status="PASS" signature="testDiv(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivLongTest@4e04a765]" name="testDiv" duration-ms="1" started-at="2020-07-13T22:10:29 ALMT" data-provider="divDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDiv -->
        <test-method status="PASS" signature="testDiv(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivLongTest@4e04a765]" name="testDiv" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="divDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDiv -->
        <test-method status="PASS" signature="testDivByZero()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivLongTest@4e04a765]" name="testDivByZero" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" depends-on-methods="com.epam.tat.module4.ArithmeticFunctionality.DivLongTest.testDiv" finished-at="2020-07-13T22:10:29 ALMT">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Attempt to divide by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Attempt to divide by zero
at com.epam.tat.module4.Calculator.div(Calculator.java:34)
at com.epam.tat.module4.ArithmeticFunctionality.DivLongTest.testDivByZero(DivLongTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivByZero -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.DivLongTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest@17550481]" name="initCalculator" is-config="true" duration-ms="21" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="testDiv(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest@17550481]" name="testDiv" duration-ms="5" started-at="2020-07-13T22:10:29 ALMT" data-provider="divDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDiv -->
        <test-method status="PASS" signature="testDiv(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest@17550481]" name="testDiv" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="divDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3.4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDiv -->
        <test-method status="PASS" signature="testDiv(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest@17550481]" name="testDiv" duration-ms="1" started-at="2020-07-13T22:10:29 ALMT" data-provider="divDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDiv -->
        <test-method status="PASS" signature="testDivByZero()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest@17550481]" name="testDivByZero" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" depends-on-methods="com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest.testDiv" finished-at="2020-07-13T22:10:29 ALMT">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Attempt to divide by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Attempt to divide by zero
at com.epam.tat.module4.Calculator.div(Calculator.java:34)
at com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest.testDivByZero(DivDoubleTest.java:12)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivByZero -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.DivDoubleTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.SumLongTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumLongTest@13fee20c]" name="initCalculator" is-config="true" duration-ms="21" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="sumLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumLongTest@13fee20c]" name="sumLongTest" duration-ms="5" started-at="2020-07-13T22:10:29 ALMT" data-provider="sumDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumLongTest -->
        <test-method status="PASS" signature="sumLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumLongTest@13fee20c]" name="sumLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="sumDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumLongTest -->
        <test-method status="PASS" signature="sumLongTest(long, long, long)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SumLongTest@13fee20c]" name="sumLongTest" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="sumDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumLongTest -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.SumLongTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.SqrtTest">
        <test-method status="PASS" signature="testSqrt(double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SqrtTest@2c6a3f77]" name="testSqrt" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="sqrtDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSqrt -->
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SqrtTest@2c6a3f77]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="testSqrt(double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.SqrtTest@2c6a3f77]" name="testSqrt" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="sqrtDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSqrt -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.SqrtTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.PowTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.PowTest@1324409e]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.PowTest@1324409e]" name="testPow" duration-ms="1" started-at="2020-07-13T22:10:29 ALMT" data-provider="powDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.PowTest@1324409e]" name="testPow" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="powDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.PowTest@1324409e]" name="testPow" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="powDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.PowTest -->
      <class name="com.epam.tat.module4.ArithmeticFunctionality.MultDoubleTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultDoubleTest@735f7ae5]" name="initCalculator" is-config="true" duration-ms="1" started-at="2020-07-13T22:10:29 ALMT" finished-at="2020-07-13T22:10:29 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="testMult(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultDoubleTest@735f7ae5]" name="testMult" duration-ms="1" started-at="2020-07-13T22:10:29 ALMT" data-provider="multDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMult -->
        <test-method status="PASS" signature="testMult(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultDoubleTest@735f7ae5]" name="testMult" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="multDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3.4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMult -->
        <test-method status="PASS" signature="testMult(double, double, double)[pri:0, instance:com.epam.tat.module4.ArithmeticFunctionality.MultDoubleTest@735f7ae5]" name="testMult" duration-ms="0" started-at="2020-07-13T22:10:29 ALMT" data-provider="multDataProvider" finished-at="2020-07-13T22:10:29 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMult -->
      </class> <!-- com.epam.tat.module4.ArithmeticFunctionality.MultDoubleTest -->
    </test> <!-- Arithmetic -->
    <test name="Logical" duration-ms="9" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
      <class name="com.epam.tat.module4.LogicalFunctionality.IsPositiveTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsPositiveTest@9f70c54]" name="initCalculator" is-config="true" duration-ms="2" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="isPositiveTest(long, boolean)[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsPositiveTest@9f70c54]" name="isPositiveTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveTest -->
        <test-method status="PASS" signature="isPositiveTest(long, boolean)[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsPositiveTest@9f70c54]" name="isPositiveTest" duration-ms="1" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveTest -->
        <test-method status="PASS" signature="isPositiveTest(long, boolean)[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsPositiveTest@9f70c54]" name="isPositiveTest" duration-ms="1" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[-244]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveTest -->
      </class> <!-- com.epam.tat.module4.LogicalFunctionality.IsPositiveTest -->
      <class name="com.epam.tat.module4.LogicalFunctionality.IsNegativeTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsNegativeTest@2096442d]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="isNegativeTest(long, boolean)[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsNegativeTest@2096442d]" name="isNegativeTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeTest -->
        <test-method status="PASS" signature="isNegativeTest(long, boolean)[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsNegativeTest@2096442d]" name="isNegativeTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeTest -->
        <test-method status="PASS" signature="isNegativeTest(long, boolean)[pri:0, instance:com.epam.tat.module4.LogicalFunctionality.IsNegativeTest@2096442d]" name="isNegativeTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[-244]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeTest -->
      </class> <!-- com.epam.tat.module4.LogicalFunctionality.IsNegativeTest -->
    </test> <!-- Logical -->
    <test name="Trigonometric" duration-ms="12" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
      <class name="com.epam.tat.module4.TrigonometricFunctionality.SinTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.SinTest@153f5a29]" name="initCalculator" is-config="true" duration-ms="1" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="FAIL" signature="SinTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.SinTest@153f5a29]" name="SinTest" duration-ms="1" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[90]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.8939966636]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[incorrect sin result expected [0.8939966636] but found [0.8939966636005579]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: incorrect sin result expected [0.8939966636] but found [0.8939966636005579]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at com.epam.tat.module4.TrigonometricFunctionality.SinTest.SinTest(SinTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SinTest -->
        <test-method status="PASS" signature="SinTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.SinTest@153f5a29]" name="SinTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SinTest -->
        <test-method status="PASS" signature="SinTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.SinTest@153f5a29]" name="SinTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[30]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.9880316240928618]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SinTest -->
      </class> <!-- com.epam.tat.module4.TrigonometricFunctionality.SinTest -->
      <class name="com.epam.tat.module4.TrigonometricFunctionality.CtgTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CtgTest@69d9c55]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="CtgTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CtgTest@69d9c55]" name="CtgTest" duration-ms="1" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CtgTest -->
        <test-method status="PASS" signature="CtgTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CtgTest@69d9c55]" name="CtgTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[90]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CtgTest -->
        <test-method status="PASS" signature="CtgTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CtgTest@69d9c55]" name="CtgTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CtgTest -->
      </class> <!-- com.epam.tat.module4.TrigonometricFunctionality.CtgTest -->
      <class name="com.epam.tat.module4.TrigonometricFunctionality.CosTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CosTest@26f67b76]" name="initCalculator" is-config="true" duration-ms="1" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="FAIL" signature="CosTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CosTest@26f67b76]" name="CosTest" duration-ms="1" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[360]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[incorrect cos result expected [1.0] but found [0.9589157234143065]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: incorrect cos result expected [1.0] but found [0.9589157234143065]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at com.epam.tat.module4.TrigonometricFunctionality.CosTest.CosTest(CosTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CosTest -->
        <test-method status="FAIL" signature="CosTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CosTest@26f67b76]" name="CosTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[60]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[incorrect cos result expected [0.5] but found [-0.3048106211022167]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: incorrect cos result expected [0.5] but found [-0.3048106211022167]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at com.epam.tat.module4.TrigonometricFunctionality.CosTest.CosTest(CosTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CosTest -->
        <test-method status="FAIL" signature="CosTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.CosTest@26f67b76]" name="CosTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[incorrect cos result expected [1.0] but found [0.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: incorrect cos result expected [1.0] but found [0.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at com.epam.tat.module4.TrigonometricFunctionality.CosTest.CosTest(CosTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CosTest -->
      </class> <!-- com.epam.tat.module4.TrigonometricFunctionality.CosTest -->
      <class name="com.epam.tat.module4.TrigonometricFunctionality.TgTest">
        <test-method status="PASS" signature="initCalculator()[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.TgTest@7f560810]" name="initCalculator" is-config="true" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" finished-at="2020-07-13T22:10:30 ALMT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initCalculator -->
        <test-method status="PASS" signature="TgTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.TgTest@7f560810]" name="TgTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TgTest -->
        <test-method status="FAIL" signature="TgTest(double, double)[pri:0, instance:com.epam.tat.module4.TrigonometricFunctionality.TgTest@7f560810]" name="TgTest" duration-ms="0" started-at="2020-07-13T22:10:30 ALMT" data-provider="DataProvider" finished-at="2020-07-13T22:10:30 ALMT">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[incorrect tg result expected [0.0] but found [NaN]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: incorrect tg result expected [0.0] but found [NaN]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at com.epam.tat.module4.TrigonometricFunctionality.TgTest.TgTest(TgTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TgTest -->
      </class> <!-- com.epam.tat.module4.TrigonometricFunctionality.TgTest -->
    </test> <!-- Trigonometric -->
  </suite> <!-- Calculator (0) -->
</testng-results>
